precompile(Tuple{typeof(Base.first), Array{Any, 1}})
precompile(Tuple{typeof(Base.lock), Base.TTY})
precompile(Tuple{typeof(Base.repeat), Char, Int64})
precompile(Tuple{typeof(Base.unlock), Base.TTY})
precompile(Tuple{typeof(Base.similar), Array{String, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{String, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{String, 1}, String, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Any, 1}})
precompile(Tuple{Type{Array{Dates.DateTime, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.maximum), Array{Dates.DateTime, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Dates.DateTime})
precompile(Tuple{typeof(Base.map), Function, Array{Base.Dict{String, Dates.DateTime}, 1}})
precompile(Tuple{typeof(TOML.Internals.Printer.is_array_of_tables), Array{Base.Dict{String, Dates.DateTime}, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:indent, :sorted, :by, :inline_tables), Tuple{Int64, Bool, typeof(Base.identity), Base.IdSet{Base.Dict{String, V} where V}}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{Base.var"##invokelatest#2", Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:indent, :sorted, :by, :inline_tables), Tuple{Int64, Bool, typeof(Base.identity), Base.IdSet{Base.Dict{String, V} where V}}}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:indent, :sorted, :by, :inline_tables), Tuple{Int64, Bool, typeof(Base.identity), Base.IdSet{Base.Dict{String, V} where V}}}, typeof(TOML.Internals.Printer.print_table), Nothing, Base.IOStream, Base.Dict{String, Dates.DateTime}, Array{String, 1}})
precompile(Tuple{typeof(Base.similar), Array{Any, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Any, 1}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, Union{Array{String, 1}, String}}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{String, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{Type{GenericMemory{:not_atomic, String, Core.AddrSpace{Core}(0x00)}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Base.UUID}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Union{Array{String, 1}, String}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Array{String, 1}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Base.Dict{String, String}}, Base.IdDict{Any, Any}})
precompile(Tuple{Base.Precompilation.var"##precompilepkgs#10", Bool, Bool, Bool, Bool, Bool, Pair{Base.Cmd, Base.CacheFlags}, Base.TTY, Bool, Bool, typeof(Base.Precompilation.precompilepkgs), Array{String, 1}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.PkgId, Base.Set{Base.PkgId}}, Base.PkgId})
precompile(Tuple{typeof(Base.issubset), Array{Base.PkgId, 1}, Base.Set{Base.PkgId}})
precompile(Tuple{Base.Precompilation.var"#collect_all_deps#52", Base.Dict{Base.PkgId, Array{Base.PkgId, 1}}, Base.PkgId, Base.Set{Base.PkgId}})
precompile(Tuple{Base.Precompilation.var"#collect_all_deps#52", Base.Dict{Base.PkgId, Array{Base.PkgId, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.vect), Array{String, 1}, Vararg{Array{String, 1}}})
precompile(Tuple{typeof(Base.iterate), Array{Array{String, 1}, 1}})
precompile(Tuple{typeof(Base.hash), Type, UInt64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, String}, String, Type{Bool}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, String}, String, Type{Int8}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, String}, String, Type{Int16}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, String}, String, Type{Int32}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, String}, String, Type{Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, String}, String, Type{UInt8}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, String}, String, Type{UInt16}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, String}, String, Type{UInt32}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, String}, String, Type{UInt64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, String}, String, Type{Float16}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, String}, String, Type{Float32}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, String}, String, Type{Float64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, String}, String, Type{Base.Complex{Float32}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, String}, String, Type{Base.Complex{Float64}}})
precompile(Tuple{CpuId.var"#cacheinclusive_level#6", UInt32, UInt32})
precompile(Tuple{typeof(Hwloc_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(micromamba_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.getproperty), Markdown.MD, Symbol})
precompile(Tuple{typeof(Base.copy!), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(CondaPkg.backend)})
precompile(Tuple{typeof(Base.getproperty), CondaPkg.State, Symbol})
precompile(Tuple{typeof(Base.:(==)), Symbol, Symbol})
precompile(Tuple{typeof(CondaPkg.getpref), Type{String}, Any, Any, Any})
precompile(Tuple{typeof(Base.setproperty!), CondaPkg.State, Symbol, Symbol})
precompile(Tuple{typeof(CondaPkg.envdir)})
precompile(Tuple{typeof(CondaPkg.resolve)})
precompile(Tuple{CondaPkg.var"##resolve#46", Bool, IO, Bool, Bool, typeof(CondaPkg.resolve)})
precompile(Tuple{typeof(Base.setproperty!), CondaPkg.State, Symbol, Bool})
precompile(Tuple{typeof(Base.setproperty!), CondaPkg.State, Symbol, Array{String, 1}})
precompile(Tuple{typeof(CondaPkg._resolve_top_env), Any})
precompile(Tuple{typeof(Base.:(==)), Base.UUID, Base.UUID})
precompile(Tuple{typeof(Base.setproperty!), CondaPkg.State, Symbol, String})
precompile(Tuple{typeof(Base.Filesystem.mkpath), String})
precompile(Tuple{Base.var"##s128#279", Vararg{Any, 5}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:wait,), Tuple{Bool}}, typeof(Pidfile.mkpidlock), String})
precompile(Tuple{typeof(CondaPkg._resolve_can_skip_1), Any, Any, Any})
precompile(Tuple{typeof(Base.Filesystem.isdir), String})
precompile(Tuple{typeof(Base.open), Function, String})
precompile(Tuple{Base.var"##open#463", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), typeof(CondaPkg.read_meta), String})
precompile(Tuple{typeof(CondaPkg.read_meta), IO})
precompile(Tuple{typeof(CondaPkg.read_meta), IO, Type{Float64}})
precompile(Tuple{typeof(Base.read), Base.IOStream, Type{Float64}})
precompile(Tuple{typeof(CondaPkg.read_meta), IO, Type{String}})
precompile(Tuple{typeof(Base.read), Base.IOStream, Int64})
precompile(Tuple{typeof(Base.length), Array{UInt8, 1}})
precompile(Tuple{Type{String}, Array{UInt8, 1}})
precompile(Tuple{typeof(CondaPkg.read_meta), IO, Type{Array{String, 1}}})
precompile(Tuple{Type{Array{String, 1}}})
precompile(Tuple{typeof(CondaPkg.read_meta), IO, Type{Base.VersionNumber}})
precompile(Tuple{typeof(CondaPkg.read_meta), IO, Type{Array{CondaPkg.PkgSpec, 1}}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, CondaPkg.PkgSpec, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Type{Array{CondaPkg.PkgSpec, 1}}})
precompile(Tuple{typeof(CondaPkg.read_meta), IO, Type{CondaPkg.PkgSpec}})
precompile(Tuple{Type{NamedTuple{(:version, :channel, :build), T} where T<:Tuple}, Tuple{String, String, String}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{names, T} where T<:Tuple where names, Type{CondaPkg.PkgSpec}, Any})
precompile(Tuple{CondaPkg.var"#_#4#5", Any, Any, Any, Type{CondaPkg.PkgSpec}, Any})
precompile(Tuple{typeof(CondaPkg.validate_pkg), Any})
precompile(Tuple{typeof(CondaPkg.is_valid_pkg), Any})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(CondaPkg.is_valid_string), Any})
precompile(Tuple{CondaPkg.var"##is_valid_string#3", Any, Any, typeof(CondaPkg.is_valid_string), Any})
precompile(Tuple{typeof(Base.:(âˆ‰)), Char, String})
precompile(Tuple{typeof(CondaPkg.normalise_pkg), Any})
precompile(Tuple{typeof(Base.strip), String})
precompile(Tuple{typeof(Base.Unicode.lowercase), Base.SubString{String}})
precompile(Tuple{typeof(CondaPkg.validate_version), Any})
precompile(Tuple{typeof(CondaPkg.is_valid_version), Any})
precompile(Tuple{Type{NamedTuple{(:allow_glob,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{names, T} where T<:Tuple where names, typeof(CondaPkg.is_valid_string), Any})
precompile(Tuple{typeof(CondaPkg.normalise_version), Any})
precompile(Tuple{Type{NamedTuple{(:allow_empty,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{names, T} where T<:Tuple where names, typeof(CondaPkg.validate_channel), Any})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:allow_empty,), Tuple{Bool}}})
precompile(Tuple{CondaPkg.var"##validate_channel#8", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(CondaPkg.validate_channel), Any})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:allow_empty,), Tuple{Bool}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{names, T} where T<:Tuple where names, typeof(CondaPkg.is_valid_channel), Any})
precompile(Tuple{CondaPkg.var"##is_valid_channel#7", Any, typeof(CondaPkg.is_valid_channel), Any})
precompile(Tuple{typeof(CondaPkg.normalise_channel), Any})
precompile(Tuple{typeof(CondaPkg.validate_build), Any})
precompile(Tuple{typeof(CondaPkg.is_valid_build), Any})
precompile(Tuple{typeof(Base.occursin), Char, String})
precompile(Tuple{typeof(CondaPkg.normalise_build), Any})
precompile(Tuple{typeof(Base.convert), Type{String}, Base.SubString{String}})
precompile(Tuple{typeof(Base.push!), Array{CondaPkg.PkgSpec, 1}, CondaPkg.PkgSpec})
precompile(Tuple{typeof(CondaPkg.read_meta), IO, Type{Array{CondaPkg.ChannelSpec, 1}}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, CondaPkg.ChannelSpec, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Type{Array{CondaPkg.ChannelSpec, 1}}})
precompile(Tuple{typeof(CondaPkg.read_meta), IO, Type{CondaPkg.ChannelSpec}})
precompile(Tuple{Type{CondaPkg.ChannelSpec}, Any})
precompile(Tuple{typeof(CondaPkg.validate_channel), Any})
precompile(Tuple{typeof(CondaPkg.is_valid_channel), Any})
precompile(Tuple{typeof(Base.isempty), Base.SubString{String}})
precompile(Tuple{typeof(Base.push!), Array{CondaPkg.ChannelSpec, 1}, CondaPkg.ChannelSpec})
precompile(Tuple{typeof(CondaPkg.read_meta), IO, Type{Array{CondaPkg.PipPkgSpec, 1}}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, CondaPkg.PipPkgSpec, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Type{Array{CondaPkg.PipPkgSpec, 1}}})
precompile(Tuple{Type{NamedTuple{(:timestamp, :conda_env, :load_path, :extra_path, :version, :packages, :channels, :pip_packages), T} where T<:Tuple}, Tuple{Float64, String, Array{String, 1}, Array{String, 1}, Base.VersionNumber, Array{CondaPkg.PkgSpec, 1}, Array{CondaPkg.ChannelSpec, 1}, Array{CondaPkg.PipPkgSpec, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{names, T} where T<:Tuple where names, Type{CondaPkg.Meta}})
precompile(Tuple{typeof(Base.sym_in), Symbol, NTuple{8, Symbol}})
precompile(Tuple{CondaPkg.var"##Meta#11", Any, Any, Any, Any, Any, Any, Any, Any, Type{CondaPkg.Meta}})
precompile(Tuple{Type{CondaPkg.Meta}, Float64, String, Array{String, 1}, Array{String, 1}, Base.VersionNumber, Array{CondaPkg.PkgSpec, 1}, Array{CondaPkg.ChannelSpec, 1}, Array{CondaPkg.PipPkgSpec, 1}})
precompile(Tuple{typeof(Base.getproperty), CondaPkg.Meta, Symbol})
precompile(Tuple{typeof(Base.:(!=)), Base.VersionNumber, Base.VersionNumber})
precompile(Tuple{typeof(Base.:(!=)), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{typeof(Base.:(>=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(CondaPkg._resolve_find_dependencies), Any, Any})
precompile(Tuple{Type{Base.Dict{String, Base.Dict{String, CondaPkg.PkgSpec}}}})
precompile(Tuple{typeof(Base.getindex), Type{CondaPkg.ChannelSpec}})
precompile(Tuple{Type{Base.Dict{String, Base.Dict{String, CondaPkg.PipPkgSpec}}}})
precompile(Tuple{typeof(Pkg.API.project)})
precompile(Tuple{typeof(Base.getproperty), Pkg.API.ProjectInfo, Symbol})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:io,), Tuple{Base.DevNull}}, typeof(Pkg.API.activate), String})
precompile(Tuple{typeof(Base.unsafe_read), Base.PipeEndpoint, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.readbytes!), Base.PipeEndpoint, Array{UInt8, 1}, Int64})
precompile(Tuple{Base.var"#893#896"{Base.Process}})
precompile(Tuple{typeof(Base.uv_shutdowncb_task), Ptr{Nothing}, Int32})
precompile(Tuple{typeof(Base.closewrite), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.:(==)), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{String, Array{String, 1}}, Base.Dict{String, Array{String, 1}}})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{String, Base.Dict{String, String}}, Base.Dict{String, Base.Dict{String, String}}})
precompile(Tuple{typeof(Base.ident_cmp), Tuple{UInt64}, Tuple{UInt64}})
precompile(Tuple{typeof(Pkg.API.dependencies)})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Pkg.Types.PackageSpec, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:name, :version, :tree_hash, :is_direct_dep, :is_pinned, :is_tracking_path, :is_tracking_repo, :is_tracking_registry, :git_revision, :git_source, :source, :dependencies), Tuple{String, Base.VersionNumber, String, Bool, Bool, Bool, Bool, Bool, Nothing, Nothing, String, Base.Dict{String, Base.UUID}}}, Type{Pkg.API.PackageInfo}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.UUID, Tuple{String, Union{Nothing, Base.VersionNumber}}}, Tuple{String, Base.VersionNumber}, Base.UUID})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.UUID, Tuple{String, Union{Nothing, Base.VersionNumber}}}, Tuple{String, Nothing}, Base.UUID})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:name, :version, :tree_hash, :is_direct_dep, :is_pinned, :is_tracking_path, :is_tracking_repo, :is_tracking_registry, :git_revision, :git_source, :source, :dependencies), Tuple{String, Base.VersionNumber, Nothing, Bool, Bool, Bool, Bool, Bool, Nothing, Nothing, String, Base.Dict{String, Base.UUID}}}, Type{Pkg.API.PackageInfo}})
precompile(Tuple{typeof(Base.values), Base.Dict{Base.UUID, Pkg.API.PackageInfo}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CondaPkg.var"#12#13", Base.ValueIterator{Base.Dict{Base.UUID, Pkg.API.PackageInfo}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.ValueIterator{Base.Dict{Base.UUID, Pkg.API.PackageInfo}}, CondaPkg.var"#12#13"}})
precompile(Tuple{CondaPkg.var"#12#13", Any})
precompile(Tuple{typeof(Base.getproperty), Pkg.API.PackageInfo, Symbol})
precompile(Tuple{typeof(Base._array_for), Type{String}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Base.ValueIterator{Base.Dict{Base.UUID, Pkg.API.PackageInfo}}, CondaPkg.var"#12#13"}, Int64})
precompile(Tuple{typeof(Base._cshp), Int64, Tuple{Bool}, Tuple{}, Tuple{Int64}})
precompile(Tuple{typeof(Base.isempty), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.rm_singleton_indices), Tuple{Bool}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.vcat), String, Array{String, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:name, :version, :tree_hash, :is_direct_dep, :is_pinned, :is_tracking_path, :is_tracking_repo, :is_tracking_registry, :git_revision, :git_source, :source, :dependencies), Tuple{String, Base.VersionNumber, String, Bool, Bool, Bool, Bool, Bool, String, String, String, Base.Dict{String, Base.UUID}}}, Type{Pkg.API.PackageInfo}})
precompile(Tuple{typeof(Base.in), String, Base.Set{String}})
precompile(Tuple{typeof(Base.push!), Base.Set{String}, String})
precompile(Tuple{typeof(Base.:(âˆ‰)), String, Array{String, 1}})
precompile(Tuple{typeof(CondaPkg._log), IO, Any})
precompile(Tuple{CondaPkg.var"##_log#42", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(CondaPkg._log), IO, Any})
precompile(Tuple{typeof(CondaPkg._log), Function, IO, Any})
precompile(Tuple{CondaPkg.var"##_log#41", Any, Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(CondaPkg._log), Function, IO, Any})
precompile(Tuple{typeof(Base.lpad), String, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:color, :bold), Tuple{Symbol, Bool}}, typeof(Base.printstyled), Base.TTY, String, Vararg{String}})
precompile(Tuple{Base.var"##printstyled#1057", Bool, Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.TTY, String, Vararg{String}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :italic, :underline, :blink, :reverse, :hidden), NTuple{6, Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.TTY, String, Vararg{String}})
precompile(Tuple{Base.var"##with_output_color#1056", Bool, Bool, Bool, Bool, Bool, Bool, typeof(Base.with_output_color), Function, Symbol, Base.TTY, String, Vararg{String}})
precompile(Tuple{typeof(Base.printstyled), Base.TTY, String})
precompile(Tuple{typeof(Base.println), Base.TTY})
precompile(Tuple{typeof(Base.flush), Base.TTY})
precompile(Tuple{typeof(CondaPkg.read_parsed_deps), Any})
precompile(Tuple{Type{NamedTuple{(:file,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{names, T} where T<:Tuple where names, typeof(CondaPkg.read_deps)})
precompile(Tuple{CondaPkg.var"##read_deps#62", Any, typeof(CondaPkg.read_deps)})
precompile(Tuple{typeof(CondaPkg.parse_deps), Any})
precompile(Tuple{typeof(Base.getindex), Type{CondaPkg.PkgSpec}})
precompile(Tuple{typeof(CondaPkg._convert), Type{Base.Dict{String, Any}}, Any})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, Any}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, Any}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, Any}, Int64, Int64})
precompile(Tuple{typeof(CondaPkg._convert), Type{String}, Any})
precompile(Tuple{typeof(Base.convert), Type{String}, String})
precompile(Tuple{typeof(Base.iterate), Base.Dict{String, Any}, Int64})
precompile(Tuple{typeof(Base.getindex), Type{CondaPkg.PipPkgSpec}})
precompile(Tuple{Type{NamedTuple{(:packages, :channels, :pip_packages), T} where T<:Tuple}, Tuple{Array{CondaPkg.PkgSpec, 1}, Array{CondaPkg.ChannelSpec, 1}, Array{CondaPkg.PipPkgSpec, 1}}})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:packages, :channels, :pip_packages), Tuple{Array{CondaPkg.PkgSpec, 1}, Array{CondaPkg.ChannelSpec, 1}, Array{CondaPkg.PipPkgSpec, 1}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:packages, :channels, :pip_packages), Tuple{Array{CondaPkg.PkgSpec, 1}, Array{CondaPkg.ChannelSpec, 1}, Array{CondaPkg.PipPkgSpec, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{CondaPkg.PkgSpec, 1}})
precompile(Tuple{typeof(Base.getproperty), CondaPkg.PkgSpec, Symbol})
precompile(Tuple{typeof(CondaPkg._compatible_openssl_version)})
precompile(Tuple{typeof(Base.get), Base.Dict{Base.UUID, Pkg.API.PackageInfo}, Base.UUID, Nothing})
precompile(Tuple{typeof(Base.iterate), Array{CondaPkg.PkgSpec, 1}, Int64})
precompile(Tuple{typeof(CondaPkg._compatible_libstdcxx_ng_version)})
precompile(Tuple{typeof(Base.BinaryPlatforms.detect_libstdcxx_version)})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.VersionNumber, String}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.VersionNumber, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.VersionNumber, String}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.VersionNumber, String}, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:version,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{names, T} where T<:Tuple where names, Type{CondaPkg.PkgSpec}, CondaPkg.PkgSpec})
precompile(Tuple{CondaPkg.var"##PkgSpec#6", Any, Any, Any, Any, Type{CondaPkg.PkgSpec}, CondaPkg.PkgSpec})
precompile(Tuple{typeof(Base.get!), Type{Base.Dict{String, CondaPkg.PkgSpec}}, Base.Dict{String, Base.Dict{String, CondaPkg.PkgSpec}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, CondaPkg.PkgSpec}, CondaPkg.PkgSpec, String})
precompile(Tuple{typeof(Base.isempty), Array{CondaPkg.ChannelSpec, 1}})
precompile(Tuple{typeof(Base.iterate), Array{CondaPkg.PipPkgSpec, 1}})
precompile(Tuple{typeof(Base.vcat), String, Array{Any, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Dict{String, Base.Dict{String, CondaPkg.PkgSpec}}, Array{CondaPkg.ChannelSpec, 1}, Base.Dict{String, Base.Dict{String, CondaPkg.PipPkgSpec}}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Dict{String, Base.Dict{String, CondaPkg.PkgSpec}}, Array{CondaPkg.ChannelSpec, 1}, Base.Dict{String, Base.Dict{String, CondaPkg.PipPkgSpec}}, Array{String, 1}}, Int64, Int64})
precompile(Tuple{typeof(CondaPkg._pip_backend)})
precompile(Tuple{typeof(Base.isempty), Base.Dict{String, Base.Dict{String, CondaPkg.PipPkgSpec}}})
precompile(Tuple{typeof(Base.unique!), Array{CondaPkg.ChannelSpec, 1}})
precompile(Tuple{typeof(Base.getproperty), Base.Order.By{CondaPkg.var"#50#57", Base.Order.ForwardOrdering}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Order.Lt{Base.Sort.var"#30#31"{Base.Order.By{CondaPkg.var"#50#57", Base.Order.ForwardOrdering}}}, Symbol})
precompile(Tuple{Base.var"##s128#278", Vararg{Any, 5}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:by,), Tuple{CondaPkg.var"#50#57"}}, typeof(Base.sort!), Array{CondaPkg.ChannelSpec, 1}})
precompile(Tuple{typeof(CondaPkg._resolve_merge_packages), Any, Any})
precompile(Tuple{typeof(Base.iterate), Base.Dict{String, Base.Dict{String, CondaPkg.PkgSpec}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, Base.Dict{String, CondaPkg.PkgSpec}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, Base.Dict{String, CondaPkg.PkgSpec}}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Base.Dict{String, CondaPkg.PkgSpec}})
precompile(Tuple{typeof(Base.values), Base.Dict{String, CondaPkg.PkgSpec}})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{Base.Dict{String, CondaPkg.PkgSpec}}})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{Base.Dict{String, CondaPkg.PkgSpec}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{String, Base.Dict{String, CondaPkg.PkgSpec}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CondaPkg.var"#14#19", Base.ValueIterator{Base.Dict{String, CondaPkg.PkgSpec}}})
precompile(Tuple{typeof(Base.any), Base.Generator{Base.ValueIterator{Base.Dict{String, CondaPkg.PkgSpec}}, CondaPkg.var"#14#19"}})
precompile(Tuple{CondaPkg.var"#14#19", Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CondaPkg.var"#15#20", Base.ValueIterator{Base.Dict{String, CondaPkg.PkgSpec}}})
precompile(Tuple{typeof(Base.append!), Array{String, 1}, Base.Generator{Base.ValueIterator{Base.Dict{String, CondaPkg.PkgSpec}}, CondaPkg.var"#15#20"}})
precompile(Tuple{CondaPkg.var"#15#20", Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CondaPkg.var"#16#21", Array{CondaPkg.ChannelSpec, 1}})
precompile(Tuple{typeof(Base.append!), Array{String, 1}, Base.Generator{Array{CondaPkg.ChannelSpec, 1}, CondaPkg.var"#16#21"}})
precompile(Tuple{CondaPkg.var"#16#21", Any})
precompile(Tuple{typeof(Base.getproperty), CondaPkg.ChannelSpec, Symbol})
precompile(Tuple{typeof(Base.filter!), CondaPkg.var"#17#22", Array{String, 1}})
precompile(Tuple{CondaPkg.var"#17#22", Any})
precompile(Tuple{typeof(Base.in), String, Tuple{String, String, String}})
precompile(Tuple{typeof(Base.first), Array{String, 1}})
precompile(Tuple{typeof(Base.collect), Base.Dict{String, CondaPkg.PkgSpec}})
precompile(Tuple{typeof(Base.iterate), Array{Pair{String, CondaPkg.PkgSpec}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, CondaPkg.PkgSpec}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, CondaPkg.PkgSpec}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:channel,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:build,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.iterate), Array{Pair{String, CondaPkg.PkgSpec}, 1}, Int64})
precompile(Tuple{typeof(Base.unique!), Array{CondaPkg.PkgSpec, 1}})
precompile(Tuple{typeof(Base.hash), CondaPkg.PkgSpec, UInt64})
precompile(Tuple{typeof(Base.hash), String, UInt64})
precompile(Tuple{typeof(Base.getproperty), Base.Order.By{CondaPkg.var"#18#23", Base.Order.ForwardOrdering}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Order.Lt{Base.Sort.var"#30#31"{Base.Order.By{CondaPkg.var"#18#23", Base.Order.ForwardOrdering}}}, Symbol})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:by,), Tuple{CondaPkg.var"#18#23"}}, typeof(Base.sort!), Array{CondaPkg.PkgSpec, 1}})
precompile(Tuple{CondaPkg.var"#18#23", Any})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, String, String})
precompile(Tuple{typeof(CondaPkg._resolve_merge_pip_packages), Any})
precompile(Tuple{typeof(Base.iterate), Base.Dict{String, Base.Dict{String, CondaPkg.PipPkgSpec}}})
precompile(Tuple{typeof(Base.getproperty), Base.Order.By{CondaPkg.var"#24#25", Base.Order.ForwardOrdering}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Order.Lt{Base.Sort.var"#30#31"{Base.Order.By{CondaPkg.var"#24#25", Base.Order.ForwardOrdering}}}, Symbol})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:by,), Tuple{CondaPkg.var"#24#25"}}, typeof(Base.sort!), Array{CondaPkg.PipPkgSpec, 1}})
precompile(Tuple{typeof(CondaPkg._resolve_diff), Any, Any})
precompile(Tuple{Type{Base.Dict{String, Base.Set{CondaPkg.PkgSpec}}}})
precompile(Tuple{typeof(Base.get!), Type{Base.Set{CondaPkg.PkgSpec}}, Base.Dict{String, Base.Set{CondaPkg.PkgSpec}}, String})
precompile(Tuple{typeof(Base.push!), Base.Set{CondaPkg.PkgSpec}, CondaPkg.PkgSpec})
precompile(Tuple{typeof(Base.keys), Base.Dict{String, Base.Set{CondaPkg.PkgSpec}}})
precompile(Tuple{typeof(Base.setdiff), Base.KeySet{String, Base.Dict{String, Base.Set{CondaPkg.PkgSpec}}}, Base.KeySet{String, Base.Dict{String, Base.Set{CondaPkg.PkgSpec}}}})
precompile(Tuple{typeof(Base.collect), Type{String}, Base.Set{String}})
precompile(Tuple{typeof(Base.intersect), Base.KeySet{String, Base.Dict{String, Base.Set{CondaPkg.PkgSpec}}}, Base.KeySet{String, Base.Dict{String, Base.Set{CondaPkg.PkgSpec}}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, CondaPkg.var"#26#28"{Base.Dict{String, Base.Set{CondaPkg.PkgSpec}}, Base.Dict{String, Base.Set{CondaPkg.PkgSpec}}}, Base.Set{String}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Base.Iterators.Filter{CondaPkg.var"#26#28"{Base.Dict{String, Base.Set{CondaPkg.PkgSpec}}, Base.Dict{String, Base.Set{CondaPkg.PkgSpec}}}, Base.Set{String}}})
precompile(Tuple{typeof(Base.collect), Type{String}, Base.Generator{Base.Iterators.Filter{CondaPkg.var"#26#28"{Base.Dict{String, Base.Set{CondaPkg.PkgSpec}}, Base.Dict{String, Base.Set{CondaPkg.PkgSpec}}}, Base.Set{String}}, typeof(Base.identity)}})
precompile(Tuple{CondaPkg.var"#26#28"{Base.Dict{String, Base.Set{CondaPkg.PkgSpec}}, Base.Dict{String, Base.Set{CondaPkg.PkgSpec}}}, Any})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, Base.Set{CondaPkg.PkgSpec}}, String})
precompile(Tuple{typeof(Base.:(!=)), Base.Set{CondaPkg.PkgSpec}, Base.Set{CondaPkg.PkgSpec}})
precompile(Tuple{typeof(Base.filter!), CondaPkg.var"#27#29", Array{String, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}, Int64, Int64})
precompile(Tuple{typeof(CondaPkg._resolve_pip_diff), Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CondaPkg.var"#30#33", Array{CondaPkg.PipPkgSpec, 1}})
precompile(Tuple{Type{Base.Dict{String, CondaPkg.PipPkgSpec}}, Base.Generator{Array{CondaPkg.PipPkgSpec, 1}, CondaPkg.var"#30#33"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CondaPkg.var"#31#34", Array{CondaPkg.PipPkgSpec, 1}})
precompile(Tuple{Type{Base.Dict{String, CondaPkg.PipPkgSpec}}, Base.Generator{Array{CondaPkg.PipPkgSpec, 1}, CondaPkg.var"#31#34"}})
precompile(Tuple{typeof(Base.keys), Base.Dict{String, CondaPkg.PipPkgSpec}})
precompile(Tuple{typeof(Base.setdiff), Base.KeySet{String, Base.Dict{String, CondaPkg.PipPkgSpec}}, Base.KeySet{String, Base.Dict{String, CondaPkg.PipPkgSpec}}})
precompile(Tuple{typeof(Base.intersect), Base.KeySet{String, Base.Dict{String, CondaPkg.PipPkgSpec}}, Base.KeySet{String, Base.Dict{String, CondaPkg.PipPkgSpec}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, CondaPkg.var"#32#35"{Base.Dict{String, CondaPkg.PipPkgSpec}, Base.Dict{String, CondaPkg.PipPkgSpec}}, Base.Set{String}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Base.Iterators.Filter{CondaPkg.var"#32#35"{Base.Dict{String, CondaPkg.PipPkgSpec}, Base.Dict{String, CondaPkg.PipPkgSpec}}, Base.Set{String}}})
precompile(Tuple{typeof(Base.collect), Type{String}, Base.Generator{Base.Iterators.Filter{CondaPkg.var"#32#35"{Base.Dict{String, CondaPkg.PipPkgSpec}, Base.Dict{String, CondaPkg.PipPkgSpec}}, Base.Set{String}}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Array{String, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CondaPkg.var"#52#58", Base.Iterators.Enumerate{Array{Array{String, 1}, 1}}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Base.Iterators.Enumerate{Array{Array{String, 1}, 1}}, CondaPkg.var"#52#58"}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Base.Generator{Base.Iterators.Enumerate{Array{Array{String, 1}, 1}}, CondaPkg.var"#52#58"}}})
precompile(Tuple{CondaPkg.var"#52#58", Any})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Array{String, 1}}, Int64, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CondaPkg.var"#51#59"{Array{String, 1}, Int64}, Array{String, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{String, 1}, CondaPkg.var"#51#59"{Array{String, 1}, Int64}}})
precompile(Tuple{typeof(Base.sort), Array{Any, 1}})
precompile(Tuple{typeof(CondaPkg.offline)})
precompile(Tuple{typeof(CondaPkg.getpref), Type{Bool}, Any, Any, Any})
precompile(Tuple{typeof(CondaPkg._resolve_env_is_clean), Any, Any})
precompile(Tuple{typeof(Base.getproperty), Base.Filesystem.StatStruct, Symbol})
precompile(Tuple{typeof(Base.:(<=)), Float64, Float64})
precompile(Tuple{typeof(Base.isempty), Array{CondaPkg.PkgSpec, 1}})
precompile(Tuple{typeof(Base.:(!=)), Array{CondaPkg.ChannelSpec, 1}, Array{CondaPkg.ChannelSpec, 1}})
precompile(Tuple{typeof(Base.:(==)), CondaPkg.ChannelSpec, CondaPkg.ChannelSpec})
precompile(Tuple{typeof(Base.isempty), Array{CondaPkg.PipPkgSpec, 1}})
precompile(Tuple{typeof(Base.Libc.time)})
precompile(Tuple{Base.var"##open#463", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), CondaPkg.var"#53#60", String, Vararg{String}})
precompile(Tuple{CondaPkg.var"#53#60", Any})
precompile(Tuple{typeof(CondaPkg.write_meta), IO, CondaPkg.Meta})
precompile(Tuple{typeof(Base.write), Base.IOStream, Int64})
precompile(Tuple{typeof(CondaPkg.write_meta), IO, Float64})
precompile(Tuple{typeof(Base.write), Base.IOStream, Float64})
precompile(Tuple{typeof(CondaPkg.write_meta), IO, String})
precompile(Tuple{typeof(Base.write), Base.IOStream, String})
precompile(Tuple{typeof(CondaPkg.write_meta), IO, Array{T, 1} where T})
precompile(Tuple{typeof(CondaPkg.write_meta), IO, Base.VersionNumber})
precompile(Tuple{typeof(Base.length), Array{CondaPkg.PkgSpec, 1}})
precompile(Tuple{typeof(CondaPkg.write_meta), IO, CondaPkg.PkgSpec})
precompile(Tuple{typeof(Base.length), Array{CondaPkg.ChannelSpec, 1}})
precompile(Tuple{typeof(Base.iterate), Array{CondaPkg.ChannelSpec, 1}})
precompile(Tuple{typeof(CondaPkg.write_meta), IO, CondaPkg.ChannelSpec})
precompile(Tuple{typeof(Base.iterate), Array{CondaPkg.ChannelSpec, 1}, Int64})
precompile(Tuple{typeof(Base.length), Array{CondaPkg.PipPkgSpec, 1}})
precompile(Tuple{typeof(Base.close), Pidfile.LockMonitor})
precompile(Tuple{typeof(CondaPkg.activate!), Any})
precompile(Tuple{typeof(CondaPkg.bindirs)})
precompile(Tuple{typeof(Base.join), Tuple{String, String}, Char})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Tuple{String, String}, Char})
precompile(Tuple{typeof(MicroMamba.root_dir)})
precompile(Tuple{typeof(Base.getproperty), MicroMamba.State, Symbol})
precompile(Tuple{typeof(Base.setproperty!), MicroMamba.State, Symbol, String})
precompile(Tuple{typeof(Base.:(-)), Int32})
precompile(Tuple{Type{NamedTuple{(:read, :write, :append, :truncate), T} where T<:Tuple}, Tuple{Bool, Bool, Nothing, Nothing}})
precompile(Tuple{Dates.var"##s53#31", Vararg{Any, 5}})
precompile(Tuple{Type{NamedTuple{(:append,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:append,), Tuple{Bool}}})
precompile(Tuple{typeof(Scratch.get_scratch!), Base.UUID, String, Base.UUID})
precompile(Tuple{typeof(Base.setindex!), Base.EnvDict, String, String})
precompile(Tuple{typeof(MicroMamba.executable)})
precompile(Tuple{MicroMamba.var"##executable#1", IO, typeof(MicroMamba.executable)})
precompile(Tuple{typeof(MicroMamba.available)})
precompile(Tuple{MicroMamba.var"##available#3", IO, typeof(MicroMamba.available)})
precompile(Tuple{typeof(micromamba_jll.is_available)})
precompile(Tuple{typeof(micromamba_jll.get_micromamba_path)})
precompile(Tuple{typeof(Base.string), String, Char, Vararg{Union{Char, String, Symbol}}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{Array{String, 1}}}})
precompile(Tuple{Base.var"#888#889"{Base.Process}})
precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
precompile(Tuple{typeof(Requires.loaded), Base.PkgId})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Base.PkgId, Module}, Base.PkgId})
precompile(Tuple{typeof(Requires.callbacks), Base.PkgId})
precompile(Tuple{typeof(Base.pointer), GenericMemoryRef{:not_atomic, Int32, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(PythonCall.C.Py_SetPythonHome), Ptr{Nothing}})
precompile(Tuple{typeof(PythonCall.C.Py_SetProgramName), Ptr{Nothing}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{32}})
precompile(Tuple{typeof(PythonCall.GC._gchook_finalizer), PythonCall.GC.GCHook})
precompile(Tuple{typeof(PythonCall.Core.__init__)})
precompile(Tuple{typeof(PythonCall.Core.pygt), Type{Bool}, PythonCall.Core.Py, Int64})
precompile(Tuple{typeof(PythonCall.C.PyObject_RichCompareBool), Ptr{PythonCall.C.PyObject}, Ptr{PythonCall.C.PyObject}, Int32})
precompile(Tuple{typeof(PythonCall.Core.pylist), Array{String, 1}})
precompile(Tuple{typeof(PythonCall.Core.pysetattr), PythonCall.Core.Py, String, PythonCall.Core.Py})
precompile(Tuple{Type{PythonCall.Core.Py}, String})
precompile(Tuple{typeof(PythonCall.Core.pystr), String})
precompile(Tuple{typeof(PythonCall.Core.pystr_fromUTF8), String})
precompile(Tuple{typeof(PythonCall.C.PyObject_SetAttr), Ptr{PythonCall.C.PyObject}, Ptr{PythonCall.C.PyObject}, Ptr{PythonCall.C.PyObject}})
precompile(Tuple{typeof(PythonCall.Core.pydict)})
precompile(Tuple{typeof(PythonCall.Core.pyexec), String, PythonCall.Core.Py})
precompile(Tuple{typeof(PythonCall.Core.pyexec), String, PythonCall.Core.Py, Nothing})
precompile(Tuple{typeof(Base.getindex), PythonCall.Core.Py, String})
precompile(Tuple{typeof(PythonCall.Core.pycopy!), PythonCall.Core.Py, PythonCall.Core.Py})
precompile(Tuple{typeof(PythonCall.Core.incref), Ptr{PythonCall.C.PyObject}})
precompile(Tuple{typeof(PythonCall.C.Py_IncRef), Ptr{PythonCall.C.PyObject}})
precompile(Tuple{UnsafePointers.var"##s5#15", Vararg{Any, 5}})
precompile(Tuple{UnsafePointers.var"##s5#13", Vararg{Any, 5}})
precompile(Tuple{typeof(Base.findfirst), Function, NTuple{49, Symbol}})
precompile(Tuple{typeof(Base._findfirst_loop), Base.Fix2{typeof(Base.:(==)), Symbol}, NTuple{49, Symbol}})
precompile(Tuple{Type{Signed}, UInt64})
precompile(Tuple{UnsafePointers.var"##s5#14", Vararg{Any, 5}})
precompile(Tuple{typeof(Base.findfirst), Function, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._findfirst_rec), Base.Fix2{typeof(Base.:(==)), Symbol}, Int64, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.convert), Type{Ptr{PythonCall.C.PyObject}}, Ptr{PythonCall.C.PyObject}})
precompile(Tuple{typeof(PythonCall.JlWrap.Cjl._pyjl_new), Ptr{PythonCall.C.PyObject}, Ptr{PythonCall.C.PyObject}, Ptr{PythonCall.C.PyObject}})
precompile(Tuple{typeof(Main.include), String})
precompile(Tuple{typeof(Base.min), Int64, Int64})
precompile(Tuple{typeof(Base.split_sign), Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{UInt64, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{UInt64, Bool}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:pad,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.abs), UInt64})
precompile(Tuple{typeof(Base.unsigned), UInt64})
precompile(Tuple{typeof(Base.top_set_bit), UInt64})
precompile(Tuple{typeof(Base.:(+)), Vararg{Int64, 6}})
precompile(Tuple{typeof(Base.:(+)), Int64, Int64, Int64, Int64, Int64, Int64, Vararg{Int64}})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.:(+)), Vararg{Int64, 6}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{31}})
precompile(Tuple{typeof(Core.checked_dims), Int64, Int64})
precompile(Tuple{Base.var"#182#184"{Tuple{Bool}, Tuple{Int64}, Int64}, Int64})
precompile(Tuple{Type{Static.StaticInt{N} where N}, Int64})
precompile(Tuple{typeof(Base.isvarargtype), Any})
precompile(Tuple{typeof(Base.struct_subpadding), Type{NTuple{4, UInt8}}, Type{UInt32}})
precompile(Tuple{typeof(Base.rem), Int64, Type{UInt32}})
precompile(Tuple{typeof(Base.:(>>>)), Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:threadpool,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{Type{NamedTuple{(:compact,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pair{Symbol, Int64}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pair{Symbol, Int64}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Pair{Symbol, Int64}})
precompile(Tuple{typeof(Base.iterate), Pair{Symbol, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Float64}, Int64, Int64})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, GLNS.Power, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Int64}, Int64, Int64})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{Float64, Array{Int64, 1}, Int64}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
precompile(Tuple{typeof(Base.ceil), Type{Int64}, Float64})
precompile(Tuple{Base.BottomRF{typeof(Base.:(+))}, Base._InitialValue, Int64})
precompile(Tuple{PythonCall.Utils.var"##s2#5", Any, Any, Any})
precompile(Tuple{PythonCall.Utils.var"##s6#6", Any, Any, Any})
precompile(Tuple{PythonCall.Utils.var"##s2#4", Any, Any, Any})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, DataType, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(PythonCall.Convert.pyconvert_isunconverted), PythonCall.Convert.Unconverted})
precompile(Tuple{PythonCall.Convert.var"##s281#38", Any, Any, Any})
precompile(Tuple{typeof(Base.get!), Type{Base.Dict{Ptr{PythonCall.C.PyObject}, Array{Function, 1}}}, Base.Dict{Type, Base.Dict{Ptr{PythonCall.C.PyObject}, Array{Function, 1}}}, Type{String}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, PythonCall.Core.Py, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Base.Iterators.var"#7#8"{Tuple{Array{PythonCall.Core.Py, 1}, Array{Array{String, 1}, 1}}}, Int64})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Array{PythonCall.Core.Py, 1}, Array{Array{String, 1}, 1}}}, Int64})
precompile(Tuple{typeof(Base._similar_shape), Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{Base.var"#13#14"{DataType}, Int64})
precompile(Tuple{typeof(Base.fieldtypes), Type})
precompile(Tuple{typeof(Base.Iterators.map), Function, Tuple{DataType, DataType}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.eltype), Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Tuple{DataType, DataType}, typeof(Base.eltype)}, Symbol})
precompile(Tuple{typeof(Base.findfirst), Function, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, PythonCall.Convert.PyConvertRule, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{PythonCall.Utils.var"#1#2"}, Symbol})
precompile(Tuple{Type{UndefVarError}, Symbol, Any})
precompile(Tuple{typeof(Base.get!), Type{Base.Dict{Ptr{PythonCall.C.PyObject}, Array{Function, 1}}}, Base.Dict{Type, Base.Dict{Ptr{PythonCall.C.PyObject}, Array{Function, 1}}}, Type{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(Base.identity), typeof(Base.mul_prod)}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{typeof(Base.in), Type, NTuple{11, DataType}})
precompile(Tuple{typeof(Base.get!), Type{Base.Dict{Ptr{PythonCall.C.PyObject}, Array{Function, 1}}}, Base.Dict{Type, Base.Dict{Ptr{PythonCall.C.PyObject}, Array{Function, 1}}}, Type{Int64}})
precompile(Tuple{typeof(Base.get!), Type{Base.Dict{Ptr{PythonCall.C.PyObject}, Array{Function, 1}}}, Base.Dict{Type, Base.Dict{Ptr{PythonCall.C.PyObject}, Array{Function, 1}}}, Type{UInt64}})
precompile(Tuple{typeof(PythonCall.Convert.pyconvert_return), Bool})
precompile(Tuple{typeof(Base.get!), Type{Base.Dict{Ptr{PythonCall.C.PyObject}, Array{Function, 1}}}, Base.Dict{Type, Base.Dict{Ptr{PythonCall.C.PyObject}, Array{Function, 1}}}, Type{Bool}})
precompile(Tuple{typeof(Base.findfirst), Function, NTuple{7, Symbol}})
precompile(Tuple{typeof(Base._findfirst_rec), Base.Fix2{typeof(Base.:(==)), Symbol}, Int64, NTuple{7, Symbol}})
precompile(Tuple{typeof(Base.findfirst), Function, NTuple{11, Symbol}})
precompile(Tuple{typeof(Base._findfirst_rec), Base.Fix2{typeof(Base.:(==)), Symbol}, Int64, NTuple{11, Symbol}})
precompile(Tuple{typeof(Base.get!), Type{Base.Dict{Ptr{PythonCall.C.PyObject}, Array{Function, 1}}}, Base.Dict{Type, Base.Dict{Ptr{PythonCall.C.PyObject}, Array{Function, 1}}}, Type{Tuple{Int64}}})
precompile(Tuple{typeof(Base.length), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.get!), Type{Base.Dict{Ptr{PythonCall.C.PyObject}, Array{Function, 1}}}, Base.Dict{Type, Base.Dict{Ptr{PythonCall.C.PyObject}, Array{Function, 1}}}, Type{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.get!), Type{Base.Dict{Ptr{PythonCall.C.PyObject}, Array{Function, 1}}}, Base.Dict{Type, Base.Dict{Ptr{PythonCall.C.PyObject}, Array{Function, 1}}}, Type{Any}})
precompile(Tuple{Type{Base.IteratorsMD.CartesianIndex{N} where N}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.IteratorsMD.CartesianIndex{2}, Symbol})
precompile(Tuple{typeof(PythonCall.Core.py_finalizer), PythonCall.Core.Py})
precompile(Tuple{typeof(Main.main)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Function, Base.SubString{String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Tuple{Int64, Int64}, Base.SubString{String}})
precompile(Tuple{Type{NPZ.Header{Int64, N, F} where F<:Function where N}, typeof(Base.ltoh), Bool, Tuple{Int64, Int64}})
precompile(Tuple{Base.var"##s1116#714", Vararg{Any, 6}})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Symbol, Expr, Vararg{Expr}})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), QuoteNode, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(NPZ._npzreadarray), Base.IOStream, NPZ.Header{Int64, 2, typeof(Base.ltoh)}})
precompile(Tuple{typeof(Base.maximum), Array{Int64, 2}})
precompile(Tuple{typeof(Base.string), Int64})
precompile(Tuple{typeof(GLNS.main), Array{String, 1}, Float64, Int64, Array{Int64, 1}, Array{Int64, 2}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.println), Base.TTY, String, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.TTY, String, Float64, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.TTY, String})
precompile(Tuple{typeof(Base.print), Base.TTY, Float64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:socket_port, :max_time, :max_removals_cap, :output, :max_removal_fraction, :new_socket_each_instance, :num_iterations, :mode, :verbose, :budget, :latest_improvement, :first_improvement), Tuple{Int64, Float64, Int64, Base.SubString{String}, Float64, Int64, Float64, Base.SubString{String}, Int64, Int64, Float64, Float64}}, typeof(GLNS.solver), String, Array{Int64, 1}, UInt64, Int64, Int64, Int64, Array{Array{Int64, 1}, 1}, Array{Int64, 2}, Array{Int64, 1}, Float64, Float64, Int64, Base.Dict{String, Any}, Bool, Array{Int64, 1}})
precompile(Tuple{typeof(Base.get!), Random.var"#1#2", Base.IdDict{Any, Any}, Any})
precompile(Tuple{typeof(Base.:(<)), UInt32, Int64})
precompile(Tuple{typeof(Base.:(==)), Base.SubString{String}, String})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(Base.round), Type{Int64}, Float64})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Pair{Symbol, Int64}, Vararg{Pair{A, B} where B where A}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{Symbol, Int64}, Pair{Symbol, Int64}, Pair{Symbol, Float64}, Pair{Symbol, String}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Int64}, Pair{Symbol, Array{String, 1}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Int64}, Type{Symbol}, Type{Real}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Real}, Tuple{Pair{Symbol, Int64}, Pair{Symbol, Int64}, Pair{Symbol, Float64}, Pair{Symbol, String}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Int64}, Pair{Symbol, Array{String, 1}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Real}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Real}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, Int64}, Pair{Symbol, Int64}, Pair{Symbol, Float64}, Pair{Symbol, String}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Int64}, Pair{Symbol, Array{String, 1}}}, Int64})
precompile(Tuple{typeof(Base.print), Base.TTY, String, Base.SubString{String}, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.TTY, Base.SubString{String}})
precompile(Tuple{typeof(Base.print), Base.TTY, String, Int64, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.TTY, Int64})
precompile(Tuple{typeof(Base.length), Base.Dict{String, Any}})
precompile(Tuple{typeof(GLNS.initialize_powers), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.iterate), Array{Float64, 1}})
precompile(Tuple{Type{GLNS.Power}, String, Float64, Base.Dict{Symbol, Float64}, Base.Dict{Symbol, Int64}, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Base.iterate), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(GLNS.initialize_noise), Base.Dict{Symbol, Float64}, Base.Dict{Symbol, Int64}, Base.Dict{Symbol, Int64}, String})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Int64, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.copy), GenericMemory{:not_atomic, Int64, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.collect), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), GLNS.Tour, Symbol})
precompile(Tuple{typeof(Base.length), Array{Int64, 1}})
precompile(Tuple{typeof(GLNS.tour_copy), GLNS.Tour})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64, Int64})
precompile(Tuple{typeof(Base.Threads.threading_run), GLNS.var"#79#threadsfor_fun#17"{GLNS.var"#79#threadsfor_fun#15#18"{UInt64, Int64, Array{Array{Int64, 1}, 1}, Array{Int64, 2}, Array{Int64, 1}, Bool, Array{Float64, 1}, Base.ReentrantLock, Base.ReentrantLock, Base.ReentrantLock, Base.ReentrantLock, Base.ReentrantLock, Base.ReentrantLock, Base.ReentrantLock, Array{Base.ReentrantLock, 1}, Base.ReentrantLock, Array{Tuple{Float64, Array{Int64, 1}, Int64}, 1}, Array{Array{Int64, 1}, 1}, GLNS.Distsv, UInt64, Base.Dict{Symbol, Real}, Float64, Base.Dict{Symbol, Any}, Float64, Base.UnitRange{Int64}}}, Bool})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(Base.identity), typeof(Base.min)}, Symbol})
precompile(Tuple{typeof(Base.get), NamedTuple{(), Tuple{}}, Symbol, Base.Missing})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:lo,), Tuple{Int64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(:lo,), Tuple{Int64}}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(:lo,), Tuple{Int64}}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.get), NamedTuple{(:lo,), Tuple{Int64}}, Symbol, Base.Missing})
precompile(Tuple{typeof(Base.Math.highword), Float64})
precompile(Tuple{typeof(Base.exp2), Int64})
precompile(Tuple{typeof(Base.floor), Type{UInt32}, Float64})
precompile(Tuple{typeof(Base.Math.exponent), Float64})
precompile(Tuple{Base.Threads.var"#1#2"{GLNS.var"#79#threadsfor_fun#17"{GLNS.var"#79#threadsfor_fun#15#18"{UInt64, Int64, Array{Array{Int64, 1}, 1}, Array{Int64, 2}, Array{Int64, 1}, Bool, Array{Float64, 1}, Base.ReentrantLock, Base.ReentrantLock, Base.ReentrantLock, Base.ReentrantLock, Base.ReentrantLock, Base.ReentrantLock, Base.ReentrantLock, Array{Base.ReentrantLock, 1}, Base.ReentrantLock, Array{Tuple{Float64, Array{Int64, 1}, Int64}, 1}, Array{Array{Int64, 1}, 1}, GLNS.Distsv, UInt64, Base.Dict{Symbol, Real}, Float64, Base.Dict{Symbol, Any}, Float64, Base.UnitRange{Int64}}}, Int64}})
precompile(Tuple{typeof(Base.:(>)), Int64, Float64})
precompile(Tuple{typeof(GLNS.remove_insert), GLNS.Tour, Array{Int64, 2}, Array{Int64, 1}, GLNS.Distsv, Array{Array{Int64, 1}, 1}, Array{Array{Int64, 1}, 1}, Base.Dict{String, Any}, Base.Dict{Symbol, Any}, Symbol, Base.ReentrantLock, Base.ReentrantLock, Array{Base.ReentrantLock, 1}, Bool, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.rand), Base.UnitRange{Int64}})
precompile(Tuple{typeof(GLNS.power_select), Array{GLNS.Power, 1}, Base.Dict{Symbol, Float64}, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{GLNS.Power, 1}, Int64})
precompile(Tuple{typeof(Base.getproperty), GLNS.Power, Symbol})
precompile(Tuple{typeof(Base.zeros), Type{Int64}, Int64})
precompile(Tuple{typeof(Base.:(!=)), Base.SubString{String}, String})
precompile(Tuple{typeof(Base.push!), Array{Tuple{Float64, Array{Int64, 1}, Int64}, 1}, Tuple{Float64, Array{Int64, 1}, Int64}})
precompile(Tuple{typeof(Base.print), Base.TTY, String, Bool, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.TTY, Bool})
precompile(Tuple{typeof(Base.:(*)), String, Base.SubString{String}})
precompile(Tuple{typeof(Base.open), Base.SubString{String}, String})
precompile(Tuple{typeof(Base.write), Base.IOStream, String, Base.SubString{String}, String})
precompile(Tuple{typeof(Base.write), Base.IOStream, String, String, String})
precompile(Tuple{typeof(Base.write), Base.IOStream, String, String})
precompile(Tuple{typeof(Base.getindex), Pair{Symbol, DataType}, Int64})
precompile(Tuple{typeof(Base.println), Base.TTY, Array{Float64, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:msg,), Tuple{Nothing}}, typeof(Base.time_print), Base.TTY, Float64, Int64, Int64, Int64, Int64, Float64, Float64, Bool})
precompile(Tuple{typeof(Base.Ryu.writefixed), Float64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:socket_port, :max_time, :max_removals_cap, :init_tour, :output, :max_removal_fraction, :new_socket_each_instance, :num_iterations, :mode, :verbose, :budget, :latest_improvement, :first_improvement), Tuple{Int64, Float64, Int64, Base.SubString{String}, Base.SubString{String}, Float64, Int64, Float64, Base.SubString{String}, Int64, Int64, Float64, Float64}}, typeof(GLNS.solver), String, Array{Int64, 1}, UInt64, Int64, Int64, Int64, Array{Array{Int64, 1}, 1}, Array{Int64, 2}, Array{Int64, 1}, Float64, Float64, Int64, Base.Dict{String, Any}, Bool, Array{Int64, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Base.SubString{String}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{Symbol, Int64}, Pair{Symbol, Int64}, Pair{Symbol, Float64}, Pair{Symbol, Base.SubString{String}}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Int64}, Pair{Symbol, Array{String, 1}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Real}, Tuple{Pair{Symbol, Int64}, Pair{Symbol, Int64}, Pair{Symbol, Float64}, Pair{Symbol, Base.SubString{String}}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Int64}, Pair{Symbol, Array{String, 1}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, Int64}, Pair{Symbol, Int64}, Pair{Symbol, Float64}, Pair{Symbol, Base.SubString{String}}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Float64}, Pair{Symbol, Int64}, Pair{Symbol, Array{String, 1}}}, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:socket_port, :max_time, :max_removals_cap, :output, :max_removal_fraction, :new_socket_each_instance, :num_iterations, :mode, :verbose, :latest_improvement, :first_improvement), Tuple{Int64, Float64, Int64, Base.SubString{String}, Float64, Int64, Float64, Base.SubString{String}, Int64, Float64, Float64}}, typeof(GLNS.solver), String, Array{Int64, 1}, UInt64, Int64, Int64, Int64, Array{Array{Int64, 1}, 1}, Array{Int64, 2}, Array{Int64, 1}, Float64, Float64, Int64, Base.Dict{String, Any}, Bool, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(GLNS.progress_bar), Int64, Float64, Int64, Float64})
precompile(Tuple{typeof(Base.print), Base.TTY, String, String, Vararg{Any}})
precompile(Tuple{typeof(PythonCall.C.PyType_IsSubtype), Ptr{PythonCall.C.PyObject}, Ptr{PythonCall.C.PyObject}})
precompile(Tuple{typeof(PythonCall.C.PyObject_CallObject), Ptr{PythonCall.C.PyObject}, Ptr{PythonCall.C.PyObject}})
precompile(Tuple{typeof(PythonCall.Core.pyisnull), PythonCall.Core.Py})
precompile(Tuple{typeof(Base.in), Type, NTuple{15, DataType}})
precompile(Tuple{typeof(Base.string), Char, String, Vararg{String}})
precompile(Tuple{Type{PythonCall.Core.Py}, Bool})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Tuple{Int64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(*)), Tuple{Tuple{Int64}, Int64}}})
precompile(Tuple{typeof(PythonCall.JlWrap.pyjlarray_array_interface), Array{Int64, 1}})
precompile(Tuple{typeof(PythonCall.Core.pytuple_setitem), PythonCall.Core.Py, Int64, Int64})
precompile(Tuple{typeof(PythonCall.C.PyTuple_SetItem), Ptr{PythonCall.C.PyObject}, Int64, Ptr{PythonCall.C.PyObject}})
precompile(Tuple{typeof(PythonCall.C.PyObject_SetItem), Ptr{PythonCall.C.PyObject}, Ptr{PythonCall.C.PyObject}, Ptr{PythonCall.C.PyObject}})
precompile(Tuple{typeof(Base.setindex!), PythonCall.Core.Py, String, String})
precompile(Tuple{typeof(PythonCall.Core.pysetitem), PythonCall.Core.Py, String, String})
precompile(Tuple{typeof(PythonCall.C.PyObject_GetAttr), Ptr{PythonCall.C.PyObject}, Ptr{PythonCall.C.PyObject}})
precompile(Tuple{typeof(PythonCall.Core.pytuple_setitem), PythonCall.Core.Py, Int64, PythonCall.Core.Py})
precompile(Tuple{typeof(PythonCall.Core.pydel!), PythonCall.Core.Py})
precompile(Tuple{typeof(PythonCall.Core.pytypecheckfast), PythonCall.Core.Py, UInt32})
precompile(Tuple{typeof(PythonCall.C.Py_TypeCheckFast), Ptr{PythonCall.C.PyObject}, UInt32})
precompile(Tuple{typeof(PythonCall.C.Py_Type), Ptr{PythonCall.C.PyObject}})
precompile(Tuple{typeof(PythonCall.C.PyType_IsSubtypeFast), Ptr{PythonCall.C.PyObject}, UInt32})
precompile(Tuple{typeof(PythonCall.C.PyLong_AsLongLong), Ptr{PythonCall.C.PyObject}})
precompile(Tuple{typeof(PythonCall.C.PySequence_Contains), Ptr{PythonCall.C.PyObject}, Ptr{PythonCall.C.PyObject}})
precompile(Tuple{typeof(Base.getindex), PythonCall.Core.Py, Int64})
precompile(Tuple{typeof(PythonCall.Convert.pyconvert_get_rules), Type, PythonCall.Core.Py})
precompile(Tuple{typeof(PythonCall.Core.pyis), PythonCall.Core.Py, PythonCall.Core.Py})
precompile(Tuple{PythonCall.Convert.var"#pyisin#11", PythonCall.Core.Py, Array{PythonCall.Core.Py, 1}})
precompile(Tuple{typeof(Base.push!), Array{PythonCall.Core.Py, 1}, PythonCall.Core.Py})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, PythonCall.Core.Py})
precompile(Tuple{typeof(Base.axes), Array{PythonCall.Convert.PyConvertRule, 1}, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:by, :rev), Tuple{PythonCall.Convert.var"#10#21", Bool}}, typeof(Base.sort), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{PythonCall.Convert.PyConvertRule, 1}, Int64})
precompile(Tuple{typeof(Base.getproperty), PythonCall.Convert.PyConvertRule, Symbol})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Tuple{PythonCall.Convert.PyConvertPriority, Int64}, Tuple{PythonCall.Convert.PyConvertPriority, Int64}})
precompile(Tuple{typeof(Base.getindex), Array{PythonCall.Convert.PyConvertRule, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._array_for), Type{PythonCall.Convert.PyConvertRule}, Array{PythonCall.Convert.PyConvertRule, 1}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{PythonCall.Convert.PyConvertRule, 1}})
precompile(Tuple{typeof(Base.iterate), Array{PythonCall.Convert.PyConvertRule, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{PythonCall.Convert.PyConvertRule, 1}, PythonCall.Convert.PyConvertRule, Int64})
precompile(Tuple{typeof(Base.iterate), Array{PythonCall.Convert.PyConvertRule, 1}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, PythonCall.Convert.var"#25#30", Array{PythonCall.Convert.PyConvertRule, 1}})
precompile(Tuple{Type{Base.Iterators.Flatten{I} where I}, Base.Generator{Array{PythonCall.Convert.PyConvertRule, 1}, PythonCall.Convert.var"#25#30"}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Base.Generator{Array{PythonCall.Convert.PyConvertRule, 1}, PythonCall.Convert.var"#25#30"}}})
precompile(Tuple{PythonCall.Convert.var"#24#31"{PythonCall.Convert.PyConvertRule}, Type})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, PythonCall.Convert.var"#26#32", Array{PythonCall.Convert.PyConvertRule, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Base.Iterators.Filter{PythonCall.Convert.var"#26#32", Array{PythonCall.Convert.PyConvertRule, 1}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{PythonCall.Convert.var"#26#32", Array{PythonCall.Convert.PyConvertRule, 1}}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{PythonCall.Convert.PyConvertRule, 1}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, PythonCall.Convert.var"#28#34", Base.Iterators.Enumerate{Array{PythonCall.Convert.PyConvertRule, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, PythonCall.Convert.var"#27#33", Base.Iterators.Filter{PythonCall.Convert.var"#28#34", Base.Iterators.Enumerate{Array{PythonCall.Convert.PyConvertRule, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{PythonCall.Convert.var"#28#34", Base.Iterators.Enumerate{Array{PythonCall.Convert.PyConvertRule, 1}}}, PythonCall.Convert.var"#27#33"}})
precompile(Tuple{typeof(Base._array_for), Type{Function}, Array{PythonCall.Convert.PyConvertRule, 1}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Function, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Function, 1}, Function, Int64})
precompile(Tuple{PythonCall.Convert.var"#36#37"{UInt64, typeof(PythonCall.Convert.pyconvert_rule_int)}, PythonCall.Core.Py})
precompile(Tuple{typeof(PythonCall.Core.pyisFalse), PythonCall.Core.Py})
precompile(Tuple{typeof(PythonCall.C.PyObject_GetItem), Ptr{PythonCall.C.PyObject}, Ptr{PythonCall.C.PyObject}})
precompile(Tuple{PythonCall.Convert.var"#36#37"{Tuple{Int64}, typeof(PythonCall.Convert.pyconvert_rule_iterable)}, PythonCall.Core.Py})
precompile(Tuple{typeof(PythonCall.C.PyTuple_GetItem), Ptr{PythonCall.C.PyObject}, Int64})
precompile(Tuple{typeof(PythonCall.Core.pyisnone), PythonCall.Core.Py})
precompile(Tuple{Type{PythonCall.Wrap.PyArray{Int64, 2, true, true, Int64}}, Array{Int64, 2}})
precompile(Tuple{typeof(PythonCall.JlWrap.pyjlarray_array_interface), Array{Int64, 2}})
precompile(Tuple{PythonCall.Convert.var"#36#37"{Tuple{Int64, Int64}, typeof(PythonCall.Convert.pyconvert_rule_iterable)}, PythonCall.Core.Py})
precompile(Tuple{PythonCall.Convert.var"#36#37"{String, typeof(PythonCall.Convert.pyconvert_rule_str)}, PythonCall.Core.Py})
precompile(Tuple{typeof(Base.split), String, String})
precompile(Tuple{typeof(Base.getindex), Array{Base.SubString{String}, 1}, Int64})
precompile(Tuple{typeof(Base.in), Base.SubString{String}, Array{String, 1}})
precompile(Tuple{typeof(Base.lastindex), Base.SubString{String}})
precompile(Tuple{typeof(Base.getindex), Base.SubString{String}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.parse), Type{Int64}, Base.SubString{String}})
precompile(Tuple{typeof(Base.parse), Type{Float64}, Base.SubString{String}})
precompile(Tuple{Type{String}, Base.SubString{String}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:socket_port, :max_time, :max_removals_cap, :output, :max_removal_fraction, :new_socket_each_instance, :num_iterations, :mode, :verbose, :latest_improvement, :first_improvement), Tuple{Int64, Float64, Int64, Base.SubString{String}, Float64, Int64, Float64, Base.SubString{String}, Int64, Float64, Float64}}, typeof(GLNS.solver), String, PythonCall.Wrap.PyArray{Int64, 1, true, true, Int64}, UInt64, Int64, Int64, Int64, Array{Array{Int64, 1}, 1}, PythonCall.Wrap.PyArray{Int64, 2, true, true, Int64}, Array{Int64, 1}, Float64, Float64, Int64, Base.Dict{String, Any}, Bool, Array{Int64, 1}})
precompile(Tuple{typeof(Base.to_indices), PythonCall.Wrap.PyArray{Int64, 1, true, true, Int64}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._getindex), Base.IndexLinear, PythonCall.Wrap.PyArray{Int64, 1, true, true, Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Threads.threading_run), GLNS.var"#79#threadsfor_fun#17"{GLNS.var"#79#threadsfor_fun#15#18"{UInt64, Int64, Array{Array{Int64, 1}, 1}, PythonCall.Wrap.PyArray{Int64, 2, true, true, Int64}, Array{Int64, 1}, Bool, Array{Float64, 1}, Base.ReentrantLock, Base.ReentrantLock, Base.ReentrantLock, Base.ReentrantLock, Base.ReentrantLock, Base.ReentrantLock, Base.ReentrantLock, Array{Base.ReentrantLock, 1}, Base.ReentrantLock, Array{Tuple{Float64, Array{Int64, 1}, Int64}, 1}, Array{Array{Int64, 1}, 1}, GLNS.Distsv, UInt64, Base.Dict{Symbol, Real}, Float64, Base.Dict{Symbol, Any}, Float64, Base.UnitRange{Int64}}}, Bool})
precompile(Tuple{Base.Threads.var"#1#2"{GLNS.var"#79#threadsfor_fun#17"{GLNS.var"#79#threadsfor_fun#15#18"{UInt64, Int64, Array{Array{Int64, 1}, 1}, PythonCall.Wrap.PyArray{Int64, 2, true, true, Int64}, Array{Int64, 1}, Bool, Array{Float64, 1}, Base.ReentrantLock, Base.ReentrantLock, Base.ReentrantLock, Base.ReentrantLock, Base.ReentrantLock, Base.ReentrantLock, Base.ReentrantLock, Array{Base.ReentrantLock, 1}, Base.ReentrantLock, Array{Tuple{Float64, Array{Int64, 1}, Int64}, 1}, Array{Array{Int64, 1}, 1}, GLNS.Distsv, UInt64, Base.Dict{Symbol, Real}, Float64, Base.Dict{Symbol, Any}, Float64, Base.UnitRange{Int64}}}, Int64}})
precompile(Tuple{typeof(GLNS.remove_insert), GLNS.Tour, PythonCall.Wrap.PyArray{Int64, 2, true, true, Int64}, Array{Int64, 1}, GLNS.Distsv, Array{Array{Int64, 1}, 1}, Array{Array{Int64, 1}, 1}, Base.Dict{String, Any}, Base.Dict{Symbol, Any}, Symbol, Base.ReentrantLock, Base.ReentrantLock, Array{Base.ReentrantLock, 1}, Bool, Array{Float64, 1}, Int64})
precompile(Tuple{PythonCall.C.var"#37#43"})
precompile(Tuple{PythonCall.C.var"#33#39"})
